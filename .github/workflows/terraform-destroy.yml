name: Terraform Destroy at Midnight

on:
  schedule:
    # Run at midnight UTC (00:00)
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      storage_prefix:
        description: 'Prefix for the Terraform state storage account name'
        required: false
        default: 'dataacademy'
        type: string
      resource_prefix:
        description: 'Prefix for resource naming (used to identify resources)'
        required: false
        default: ''
        type: string
      confirm_destroy:
        description: 'Type "destroy" to confirm infrastructure destruction'
        required: true
        type: string
      taint_before_destroy:
        description: 'Taint resources before destroying (useful for partial destroy/recreate)'
        required: false
        type: boolean
        default: false

env:
  TF_VERSION: '1.0.0'
  WORKING_DIR: './infra'
  STORAGE_PREFIX: ${{ github.event.inputs.storage_prefix || 'dataacademy' }}
  # Databricks provider configuration
  DATABRICKS_HOST: ''
  DATABRICKS_TOKEN: ''

permissions:
  contents: read
  issues: write 
jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    
    # Only run if it's a scheduled run or if the confirmation is "destroy"
    if: github.event_name == 'schedule' || github.event.inputs.confirm_destroy == 'destroy'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Resource Prefix
      id: set_prefix
      run: |
        # If resource_prefix is empty or 'da', use the repository owner's first and last two letters
        if [ -z "${{ github.event.inputs.resource_prefix }}" ] || [ "${{ github.event.inputs.resource_prefix }}" = "da" ]; then
          # Get the repository owner name
          OWNER="${{ github.repository_owner }}"
          # Convert to lowercase
          OWNER_LOWER=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          # Get the first letter and last two letters
          if [ ${#OWNER_LOWER} -ge 3 ]; then
            FIRST_LETTER=${OWNER_LOWER:0:1}
            LAST_TWO=${OWNER_LOWER: -2}
            CUSTOM_PREFIX="${FIRST_LETTER}${LAST_TWO}"
          else
            # If the name is too short, just use it as is
            CUSTOM_PREFIX="$OWNER_LOWER"
          fi
          echo "RESOURCE_PREFIX=$CUSTOM_PREFIX" >> $GITHUB_ENV
          echo "Using generated prefix from repository owner: $CUSTOM_PREFIX"
        else
          # Use the provided prefix
          echo "RESOURCE_PREFIX=${{ github.event.inputs.resource_prefix }}" >> $GITHUB_ENV
          echo "Using provided prefix: ${{ github.event.inputs.resource_prefix }}"
        fi

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract Azure Credentials
      id: azure_creds
      run: |
        # Extract credentials from the AZURE_CREDENTIALS secret
        echo "client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_OUTPUT
        echo "client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_OUTPUT
        echo "subscription_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_OUTPUT
        echo "tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_OUTPUT

    - name: Make setup script executable
      run: chmod +x ./.github/scripts/setup_terraform_state.sh

    - name: Setup Terraform State Storage
      run: |
        # Ensure infra directory exists
        mkdir -p ${{ github.workspace }}/infra
        
        # Run the setup script to ensure backend.tf is created
        ./.github/scripts/setup_terraform_state.sh "${{ env.STORAGE_PREFIX }}"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ steps.azure_creds.outputs.client_id }}
        ARM_CLIENT_SECRET: ${{ steps.azure_creds.outputs.client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azure_creds.outputs.subscription_id }}
        ARM_TENANT_ID: ${{ steps.azure_creds.outputs.tenant_id }}
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}

    - name: Make taint script executable
      if: github.event.inputs.taint_before_destroy == 'true'
      run: chmod +x ./.github/scripts/taint_resources.sh

    - name: Taint Resources
      if: github.event.inputs.taint_before_destroy == 'true'
      env:
        ARM_CLIENT_ID: ${{ steps.azure_creds.outputs.client_id }}
        ARM_CLIENT_SECRET: ${{ steps.azure_creds.outputs.client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azure_creds.outputs.subscription_id }}
        ARM_TENANT_ID: ${{ steps.azure_creds.outputs.tenant_id }}
      run: |
        # Check if taint_resources.txt exists and has non-comment content
        if [ -f "taint_resources.txt" ] && grep -v "^#" "taint_resources.txt" | grep -q "[^[:space:]]"; then
          ./.github/scripts/taint_resources.sh --file taint_resources.txt --dir ${{ env.WORKING_DIR }}
          
          # Apply changes to recreate tainted resources before destroying
          cd ${{ env.WORKING_DIR }}
          terraform apply -auto-approve -var="prefix=${{ env.RESOURCE_PREFIX }}"
          
          # Clear the taint file
          cd ${{ github.workspace }}
          sed -i '/^[^#]/d' taint_resources.txt
          echo "Tainted resources recreated and taint file cleared."
        else
          echo "No resources to taint or taint file is empty."
        fi

    - name: Terraform Plan Destroy
      env:
        ARM_CLIENT_ID: ${{ steps.azure_creds.outputs.client_id }}
        ARM_CLIENT_SECRET: ${{ steps.azure_creds.outputs.client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azure_creds.outputs.subscription_id }}
        ARM_TENANT_ID: ${{ steps.azure_creds.outputs.tenant_id }}
      run: terraform plan -destroy -out=destroy.tfplan -var="prefix=${{ env.RESOURCE_PREFIX }}"
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Apply Destroy
      env:
        ARM_CLIENT_ID: ${{ steps.azure_creds.outputs.client_id }}
        ARM_CLIENT_SECRET: ${{ steps.azure_creds.outputs.client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.azure_creds.outputs.subscription_id }}
        ARM_TENANT_ID: ${{ steps.azure_creds.outputs.tenant_id }}
      run: terraform apply destroy.tfplan
      working-directory: ${{ env.WORKING_DIR }}
      
    - name: Notify Destruction Complete
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const issueTitle = 'Infrastructure Destroyed at Midnight';
          const issueBody = `
          # Infrastructure Destruction Complete
          
          The infrastructure resources have been successfully destroyed at midnight UTC.
          
          **Timestamp:** ${new Date().toISOString()}
          
          **Workflow Run:** [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          To redeploy the infrastructure, you can manually trigger the Terraform Deploy workflow.
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
          }); 